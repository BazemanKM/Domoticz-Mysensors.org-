    #include <SPI.h>
    #include <MySensor.h>  
    #include <DHT.h>  
    #include <BH1750.h>
    #include <Wire.h> 
    #include <Adafruit_BMP085.h>
    
    #define CHILD_ID_HUM 0
    #define CHILD_ID_TEMP 1
    #define CHILD_ID_LIGHT 2
    #define CHILD_ID_BARO 3
    #define CHILD_ID_BTEMP 4
    #define CHILD_ID_RAIN 5
    
    #define DIGITAL_INPUT_RAIN_SENSOR 3 
    #define HUMIDITY_SENSOR_DIGITAL_PIN 4
    #define INTERRUPT DIGITAL_INPUT_RAIN_SENSOR-2
    
    boolean metric = false;
    int altitude = 2; // Veendam 2.000,6.562
    float lastBmpTemp = -1;
    float lastPressure = -1;
    float lastHum = -1;
    float lastTemp = -1;
    int BATTERY_SENSE_PIN = A0;
    int lastRainValue = -1;
    int lastBatteryPcnt = 0;
    int updateAll = 60;
    int updateCount = 0;
    uint16_t lastLux;
    unsigned long SLEEP_TIME = 60000;
    int batteryBasement = 800;
    float batteryConstant = 100.0 / (1023 - batteryBasement);
    
    Adafruit_BMP085 bmp = Adafruit_BMP085();
    BH1750 lightSensor;
    DHT dht;
    MySensor gw;
    
    MyMessage msgHum(CHILD_ID_HUM, V_HUM);
    MyMessage msgTemp(CHILD_ID_TEMP, V_TEMP);
    MyMessage msgLux(CHILD_ID_LIGHT, V_LIGHT_LEVEL);
    MyMessage msgBtemp(CHILD_ID_BTEMP, V_TEMP);
    MyMessage msgPressure(CHILD_ID_BARO, V_PRESSURE);
    MyMessage msgRain(CHILD_ID_RAIN, V_TRIPPED);
    
    void setup()  
    {
      analogReference(INTERNAL);
      gw.begin();
      dht.setup(HUMIDITY_SENSOR_DIGITAL_PIN); 
      bmp.begin();
      gw.sendSketchInfo("Weather Sensor", "1.0");
      gw.present(CHILD_ID_HUM, S_HUM);
      gw.present(CHILD_ID_TEMP, S_TEMP);
      gw.present(CHILD_ID_LIGHT, S_LIGHT_LEVEL);
      gw.present(CHILD_ID_BARO, S_BARO);
      gw.present(CHILD_ID_BTEMP, S_TEMP);
      gw.present(CHILD_ID_RAIN, S_MOTION);
      pinMode(DIGITAL_INPUT_RAIN_SENSOR, INPUT);
      lightSensor.begin();
      metric = gw.getConfig().isMetric;
    }
    
    void loop()      
    {
      updateCount += 1;
      if (updateCount == updateAll) {
        lastTemp = -1;
        lastHum = -1;
        lastLux = -1;
        lastBmpTemp = -1;
        lastPressure = -1;
        lastRainValue = -1;
        lastBatteryPcnt = -1;
        updateCount = 0;
      }
      delay(dht.getMinimumSamplingPeriod());
      float temperature = dht.getTemperature();
      if (isnan(temperature)) {
          lastTemp = -1;
      } else if (temperature != lastTemp) {
        lastTemp = temperature;
        if (!metric) {
          temperature = temperature * 1.8 + 32.0;
        }
        gw.send(msgTemp.set(temperature, 1));
      }
      float humidity = dht.getHumidity();
      if (isnan(humidity)) {
          lastHum = -1;
      } else if (humidity != lastHum) {
          lastHum = humidity;
          gw.send(msgHum.set(humidity, 1));
      }
      uint16_t lux = lightSensor.readLightLevel();
      if (lux != lastLux) {
          gw.send(msgLux.set(lux));
          lastLux = lux;
      }
      float pressure = bmp.readSealevelPressure(altitude) * 0.01;
      float bmptemp = bmp.readTemperature();
      if (!metric) {
        bmptemp = bmptemp * 1.8 + 32.0;
      }
      if (bmptemp != lastBmpTemp) {
        gw.send(msgBtemp.set(bmptemp,1));
        lastBmpTemp = bmptemp;
      }
      if (pressure != lastPressure) {
        gw.send(msgPressure.set(pressure, 0));
        lastPressure = pressure;
      }
      int rainValue = digitalRead(DIGITAL_INPUT_RAIN_SENSOR);
      if (rainValue != lastRainValue) {
        gw.send(msgRain.set(rainValue==0?1:0));
        lastRainValue = rainValue;
      }
      int sensorValue = analogRead(BATTERY_SENSE_PIN);
      int batteryPcnt = (sensorValue - batteryBasement) * batteryConstant;
      if (lastBatteryPcnt != batteryPcnt) {
        gw.sendBatteryLevel(batteryPcnt);
        lastBatteryPcnt = batteryPcnt;
     }
      gw.sleep(SLEEP_TIME);
    }
