#include <SPI.h>
#include <MySensor.h>  
#include <DHT.h>  
#include <BH1750.h>
#include <Wire.h> 
#include <Adafruit_BMP085.h>
    
#define CHILD_ID_HUM 0
#define CHILD_ID_TEMP 1
#define CHILD_ID_LIGHT 2
#define CHILD_ID_BARO 3
#define CHILD_ID_BTEMP 4
#define CHILD_ID_UV 5

#define HUMIDITY_SENSOR_DIGITAL_PIN 4
#define UV_SENSOR_ANALOG_PIN 3
    
boolean metric = false;
int altitude = 2; // Veendam
float lastBmpTemp = -1;
float lastPressure = -1;
float lastHum = -1;
float lastTemp = -1;
int BATTERY_SENSE_PIN = A0;
int lastBatteryPcnt = 0;
int updateAll = 60;
int updateCount = 0;
uint16_t lastLux;
unsigned long SLEEP_TIME = 60000;
int batteryBasement = 800;
float batteryConstant = 100.0 / (1023 - batteryBasement);
unsigned long lastSend =0;
float uvIndex;
float lastUV = -1;
int uvIndexValue [12] = { 50, 227, 318, 408, 503, 606, 696, 795, 881, 976, 1079, 1170};
    
Adafruit_BMP085 bmp = Adafruit_BMP085();
BH1750 lightSensor;
DHT dht;
MySensor gw;
MyMessage msgHum(CHILD_ID_HUM, V_HUM);
MyMessage msgTemp(CHILD_ID_TEMP, V_TEMP);
MyMessage msgLux(CHILD_ID_LIGHT, V_LEVEL);
MyMessage msgBtemp(CHILD_ID_BTEMP, V_TEMP);
MyMessage msgPressure(CHILD_ID_BARO, V_PRESSURE);
MyMessage msgUv(CHILD_ID_UV, V_UV);
    
void setup()  
{
    analogReference(INTERNAL);
    gw.begin();
    dht.setup(HUMIDITY_SENSOR_DIGITAL_PIN); 
    bmp.begin();
    gw.sendSketchInfo("Weerstation", "1.0");
    gw.present(CHILD_ID_HUM, S_HUM);
    gw.present(CHILD_ID_TEMP, S_TEMP);
    gw.present(CHILD_ID_LIGHT, S_LIGHT_LEVEL);
    gw.present(CHILD_ID_BARO, S_BARO);
    gw.present(CHILD_ID_BTEMP, S_TEMP);
    lightSensor.begin();
    metric = gw.getConfig().isMetric;
    gw.present(CHILD_ID_UV, S_UV);
    }
    
void loop()      
{
    updateCount += 1;
    if (updateCount == updateAll) {
    lastTemp = -1;
    lastHum = -1;
    lastLux = -1;
    lastBmpTemp = -1;
    lastPressure = -1;
    lastBatteryPcnt = -1;
    updateCount = 0;
    }
    delay(dht.getMinimumSamplingPeriod());
    float temperature = dht.getTemperature();
    if (isnan(temperature)) {
        lastTemp = -1;
    } else if (temperature != lastTemp) {
    lastTemp = temperature;
    if (!metric) {
        temperature = temperature * 1.8 + 32.0;
    }
    gw.send(msgTemp.set(temperature, 1));
    }
    float humidity = dht.getHumidity();
    if (isnan(humidity)) {
        lastHum = -1;
    } else if (humidity != lastHum) {
        lastHum = humidity;
        gw.send(msgHum.set(humidity, 1));
    }
    uint16_t lux = lightSensor.readLightLevel();
    if (lux != lastLux) {
        gw.send(msgLux.set(lux));
        lastLux = lux;
    }
    float pressure = bmp.readSealevelPressure(altitude) * 0.01;
    float bmptemp = bmp.readTemperature();
    if (!metric) {
        bmptemp = bmptemp * 1.8 + 32.0;
    }
    if (bmptemp != lastBmpTemp) {
        gw.send(msgBtemp.set(bmptemp,1));
        lastBmpTemp = bmptemp;
    }
    if (pressure != lastPressure) {
        gw.send(msgPressure.set(pressure, 0));
        lastPressure = pressure;
    }
    int sensorValue = analogRead(BATTERY_SENSE_PIN);
    int batteryPcnt = (sensorValue - batteryBasement) * batteryConstant;
    if (lastBatteryPcnt != batteryPcnt) {
        gw.sendBatteryLevel(batteryPcnt);
        lastBatteryPcnt = batteryPcnt;
    }
    unsigned long currentTime = millis();
    uint16_t uv = analogRead(UV_SENSOR_ANALOG_PIN);
    if (uv>1170)
        uv=1170;
  
    int i;
    for (i = 0; i < 12; i++)
    {
        if (uv <= uvIndexValue[i]) 
        {
        uvIndex = i;
        break;
        }
    }
  
    if (i>0) {
        float vRange=uvIndexValue[i]-uvIndexValue[i-1];
        float vCalc=uv-uvIndexValue[i-1];
        uvIndex+=(1.0/vRange)*vCalc-1.0;
    }

    if ((uvIndex != lastUV)||(currentTime-lastSend >= 5*60*1000)) {
        lastSend=currentTime;
        gw.send(msgUv.set(uvIndex,2));
        lastUV = uvIndex;
  }
    
gw.sleep(SLEEP_TIME);
}
